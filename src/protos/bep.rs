// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `bep.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct Hello {
    // message fields
    pub device_name: ::protobuf::Chars,
    pub client_name: ::protobuf::Chars,
    pub client_version: ::protobuf::Chars,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Hello {
    fn default() -> &'a Hello {
        <Hello as ::protobuf::Message>::default_instance()
    }
}

impl Hello {
    pub fn new() -> Hello {
        ::std::default::Default::default()
    }

    // string device_name = 1;


    pub fn get_device_name(&self) -> &str {
        &self.device_name
    }
    pub fn clear_device_name(&mut self) {
        ::protobuf::Clear::clear(&mut self.device_name);
    }

    // Param is passed by value, moved
    pub fn set_device_name(&mut self, v: ::protobuf::Chars) {
        self.device_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_name(&mut self) -> &mut ::protobuf::Chars {
        &mut self.device_name
    }

    // Take field
    pub fn take_device_name(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.device_name, ::protobuf::Chars::new())
    }

    // string client_name = 2;


    pub fn get_client_name(&self) -> &str {
        &self.client_name
    }
    pub fn clear_client_name(&mut self) {
        ::protobuf::Clear::clear(&mut self.client_name);
    }

    // Param is passed by value, moved
    pub fn set_client_name(&mut self, v: ::protobuf::Chars) {
        self.client_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_name(&mut self) -> &mut ::protobuf::Chars {
        &mut self.client_name
    }

    // Take field
    pub fn take_client_name(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.client_name, ::protobuf::Chars::new())
    }

    // string client_version = 3;


    pub fn get_client_version(&self) -> &str {
        &self.client_version
    }
    pub fn clear_client_version(&mut self) {
        ::protobuf::Clear::clear(&mut self.client_version);
    }

    // Param is passed by value, moved
    pub fn set_client_version(&mut self, v: ::protobuf::Chars) {
        self.client_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_version(&mut self) -> &mut ::protobuf::Chars {
        &mut self.client_version
    }

    // Take field
    pub fn take_client_version(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.client_version, ::protobuf::Chars::new())
    }
}

impl ::protobuf::Message for Hello {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.device_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.client_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.client_version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.device_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.device_name);
        }
        if !self.client_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_name);
        }
        if !self.client_version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.client_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.device_name.is_empty() {
            os.write_string(1, &self.device_name)?;
        }
        if !self.client_name.is_empty() {
            os.write_string(2, &self.client_name)?;
        }
        if !self.client_version.is_empty() {
            os.write_string(3, &self.client_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Hello {
        Hello::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "device_name",
                |m: &Hello| { &m.device_name },
                |m: &mut Hello| { &mut m.device_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "client_name",
                |m: &Hello| { &m.client_name },
                |m: &mut Hello| { &mut m.client_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "client_version",
                |m: &Hello| { &m.client_version },
                |m: &mut Hello| { &mut m.client_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Hello>(
                "Hello",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Hello {
        static instance: ::protobuf::rt::LazyV2<Hello> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Hello::new)
    }
}

impl ::protobuf::Clear for Hello {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.device_name);
        ::protobuf::Clear::clear(&mut self.client_name);
        ::protobuf::Clear::clear(&mut self.client_version);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Hello {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Hello {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Header {
    // message fields
    pub field_type: MessageType,
    pub compression: MessageCompression,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    // .protocol.MessageType type = 1;


    pub fn get_field_type(&self) -> MessageType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = MessageType::MESSAGE_TYPE_CLUSTER_CONFIG;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: MessageType) {
        self.field_type = v;
    }

    // .protocol.MessageCompression compression = 2;


    pub fn get_compression(&self) -> MessageCompression {
        self.compression
    }
    pub fn clear_compression(&mut self) {
        self.compression = MessageCompression::MESSAGE_COMPRESSION_NONE;
    }

    // Param is passed by value, moved
    pub fn set_compression(&mut self, v: MessageCompression) {
        self.compression = v;
    }
}

impl ::protobuf::Message for Header {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.compression, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != MessageType::MESSAGE_TYPE_CLUSTER_CONFIG {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if self.compression != MessageCompression::MESSAGE_COMPRESSION_NONE {
            my_size += ::protobuf::rt::enum_size(2, self.compression);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != MessageType::MESSAGE_TYPE_CLUSTER_CONFIG {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.compression != MessageCompression::MESSAGE_COMPRESSION_NONE {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.compression))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Header {
        Header::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MessageType>>(
                "type",
                |m: &Header| { &m.field_type },
                |m: &mut Header| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MessageCompression>>(
                "compression",
                |m: &Header| { &m.compression },
                |m: &mut Header| { &mut m.compression },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Header>(
                "Header",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Header {
        static instance: ::protobuf::rt::LazyV2<Header> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Header::new)
    }
}

impl ::protobuf::Clear for Header {
    fn clear(&mut self) {
        self.field_type = MessageType::MESSAGE_TYPE_CLUSTER_CONFIG;
        self.compression = MessageCompression::MESSAGE_COMPRESSION_NONE;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterConfig {
    // message fields
    pub folders: ::protobuf::RepeatedField<Folder>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClusterConfig {
    fn default() -> &'a ClusterConfig {
        <ClusterConfig as ::protobuf::Message>::default_instance()
    }
}

impl ClusterConfig {
    pub fn new() -> ClusterConfig {
        ::std::default::Default::default()
    }

    // repeated .protocol.Folder folders = 1;


    pub fn get_folders(&self) -> &[Folder] {
        &self.folders
    }
    pub fn clear_folders(&mut self) {
        self.folders.clear();
    }

    // Param is passed by value, moved
    pub fn set_folders(&mut self, v: ::protobuf::RepeatedField<Folder>) {
        self.folders = v;
    }

    // Mutable pointer to the field.
    pub fn mut_folders(&mut self) -> &mut ::protobuf::RepeatedField<Folder> {
        &mut self.folders
    }

    // Take field
    pub fn take_folders(&mut self) -> ::protobuf::RepeatedField<Folder> {
        ::std::mem::replace(&mut self.folders, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClusterConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.folders {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.folders)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.folders {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.folders {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClusterConfig {
        ClusterConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Folder>>(
                "folders",
                |m: &ClusterConfig| { &m.folders },
                |m: &mut ClusterConfig| { &mut m.folders },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClusterConfig>(
                "ClusterConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClusterConfig {
        static instance: ::protobuf::rt::LazyV2<ClusterConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClusterConfig::new)
    }
}

impl ::protobuf::Clear for ClusterConfig {
    fn clear(&mut self) {
        self.folders.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Folder {
    // message fields
    pub id: ::protobuf::Chars,
    pub label: ::protobuf::Chars,
    pub read_only: bool,
    pub ignore_permissions: bool,
    pub ignore_delete: bool,
    pub disable_temp_indexes: bool,
    pub paused: bool,
    pub devices: ::protobuf::RepeatedField<Device>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Folder {
    fn default() -> &'a Folder {
        <Folder as ::protobuf::Message>::default_instance()
    }
}

impl Folder {
    pub fn new() -> Folder {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        ::protobuf::Clear::clear(&mut self.id);
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::protobuf::Chars) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::protobuf::Chars {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.id, ::protobuf::Chars::new())
    }

    // string label = 2;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        ::protobuf::Clear::clear(&mut self.label);
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::protobuf::Chars) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::protobuf::Chars {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.label, ::protobuf::Chars::new())
    }

    // bool read_only = 3;


    pub fn get_read_only(&self) -> bool {
        self.read_only
    }
    pub fn clear_read_only(&mut self) {
        self.read_only = false;
    }

    // Param is passed by value, moved
    pub fn set_read_only(&mut self, v: bool) {
        self.read_only = v;
    }

    // bool ignore_permissions = 4;


    pub fn get_ignore_permissions(&self) -> bool {
        self.ignore_permissions
    }
    pub fn clear_ignore_permissions(&mut self) {
        self.ignore_permissions = false;
    }

    // Param is passed by value, moved
    pub fn set_ignore_permissions(&mut self, v: bool) {
        self.ignore_permissions = v;
    }

    // bool ignore_delete = 5;


    pub fn get_ignore_delete(&self) -> bool {
        self.ignore_delete
    }
    pub fn clear_ignore_delete(&mut self) {
        self.ignore_delete = false;
    }

    // Param is passed by value, moved
    pub fn set_ignore_delete(&mut self, v: bool) {
        self.ignore_delete = v;
    }

    // bool disable_temp_indexes = 6;


    pub fn get_disable_temp_indexes(&self) -> bool {
        self.disable_temp_indexes
    }
    pub fn clear_disable_temp_indexes(&mut self) {
        self.disable_temp_indexes = false;
    }

    // Param is passed by value, moved
    pub fn set_disable_temp_indexes(&mut self, v: bool) {
        self.disable_temp_indexes = v;
    }

    // bool paused = 7;


    pub fn get_paused(&self) -> bool {
        self.paused
    }
    pub fn clear_paused(&mut self) {
        self.paused = false;
    }

    // Param is passed by value, moved
    pub fn set_paused(&mut self, v: bool) {
        self.paused = v;
    }

    // repeated .protocol.Device devices = 16;


    pub fn get_devices(&self) -> &[Device] {
        &self.devices
    }
    pub fn clear_devices(&mut self) {
        self.devices.clear();
    }

    // Param is passed by value, moved
    pub fn set_devices(&mut self, v: ::protobuf::RepeatedField<Device>) {
        self.devices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_devices(&mut self) -> &mut ::protobuf::RepeatedField<Device> {
        &mut self.devices
    }

    // Take field
    pub fn take_devices(&mut self) -> ::protobuf::RepeatedField<Device> {
        ::std::mem::replace(&mut self.devices, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Folder {
    fn is_initialized(&self) -> bool {
        for v in &self.devices {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.label)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.read_only = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ignore_permissions = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ignore_delete = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disable_temp_indexes = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.paused = tmp;
                },
                16 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.devices)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.label);
        }
        if self.read_only != false {
            my_size += 2;
        }
        if self.ignore_permissions != false {
            my_size += 2;
        }
        if self.ignore_delete != false {
            my_size += 2;
        }
        if self.disable_temp_indexes != false {
            my_size += 2;
        }
        if self.paused != false {
            my_size += 2;
        }
        for value in &self.devices {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.label.is_empty() {
            os.write_string(2, &self.label)?;
        }
        if self.read_only != false {
            os.write_bool(3, self.read_only)?;
        }
        if self.ignore_permissions != false {
            os.write_bool(4, self.ignore_permissions)?;
        }
        if self.ignore_delete != false {
            os.write_bool(5, self.ignore_delete)?;
        }
        if self.disable_temp_indexes != false {
            os.write_bool(6, self.disable_temp_indexes)?;
        }
        if self.paused != false {
            os.write_bool(7, self.paused)?;
        }
        for v in &self.devices {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Folder {
        Folder::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "id",
                |m: &Folder| { &m.id },
                |m: &mut Folder| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "label",
                |m: &Folder| { &m.label },
                |m: &mut Folder| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "read_only",
                |m: &Folder| { &m.read_only },
                |m: &mut Folder| { &mut m.read_only },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ignore_permissions",
                |m: &Folder| { &m.ignore_permissions },
                |m: &mut Folder| { &mut m.ignore_permissions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ignore_delete",
                |m: &Folder| { &m.ignore_delete },
                |m: &mut Folder| { &mut m.ignore_delete },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "disable_temp_indexes",
                |m: &Folder| { &m.disable_temp_indexes },
                |m: &mut Folder| { &mut m.disable_temp_indexes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "paused",
                |m: &Folder| { &m.paused },
                |m: &mut Folder| { &mut m.paused },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Device>>(
                "devices",
                |m: &Folder| { &m.devices },
                |m: &mut Folder| { &mut m.devices },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Folder>(
                "Folder",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Folder {
        static instance: ::protobuf::rt::LazyV2<Folder> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Folder::new)
    }
}

impl ::protobuf::Clear for Folder {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.id);
        ::protobuf::Clear::clear(&mut self.label);
        self.read_only = false;
        self.ignore_permissions = false;
        self.ignore_delete = false;
        self.disable_temp_indexes = false;
        self.paused = false;
        self.devices.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Folder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Folder {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Device {
    // message fields
    pub id: ::bytes::Bytes,
    pub name: ::protobuf::Chars,
    pub addresses: ::std::vec::Vec<::protobuf::Chars>,
    pub compression: Compression,
    pub cert_name: ::protobuf::Chars,
    pub max_sequence: i64,
    pub introducer: bool,
    pub index_id: u64,
    pub skip_introduction_removals: bool,
    pub encryption_password_token: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Device {
    fn default() -> &'a Device {
        <Device as ::protobuf::Message>::default_instance()
    }
}

impl Device {
    pub fn new() -> Device {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::bytes::Bytes) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::bytes::Bytes {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.id, ::bytes::Bytes::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        ::protobuf::Clear::clear(&mut self.name);
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::protobuf::Chars) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::protobuf::Chars {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.name, ::protobuf::Chars::new())
    }

    // repeated string addresses = 3;


    pub fn get_addresses(&self) -> &[::protobuf::Chars] {
        &self.addresses
    }
    pub fn clear_addresses(&mut self) {
        self.addresses.clear();
    }

    // Param is passed by value, moved
    pub fn set_addresses(&mut self, v: ::std::vec::Vec<::protobuf::Chars>) {
        self.addresses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addresses(&mut self) -> &mut ::std::vec::Vec<::protobuf::Chars> {
        &mut self.addresses
    }

    // Take field
    pub fn take_addresses(&mut self) -> ::std::vec::Vec<::protobuf::Chars> {
        ::std::mem::replace(&mut self.addresses, ::std::vec::Vec::new())
    }

    // .protocol.Compression compression = 4;


    pub fn get_compression(&self) -> Compression {
        self.compression
    }
    pub fn clear_compression(&mut self) {
        self.compression = Compression::COMPRESSION_METADATA;
    }

    // Param is passed by value, moved
    pub fn set_compression(&mut self, v: Compression) {
        self.compression = v;
    }

    // string cert_name = 5;


    pub fn get_cert_name(&self) -> &str {
        &self.cert_name
    }
    pub fn clear_cert_name(&mut self) {
        ::protobuf::Clear::clear(&mut self.cert_name);
    }

    // Param is passed by value, moved
    pub fn set_cert_name(&mut self, v: ::protobuf::Chars) {
        self.cert_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cert_name(&mut self) -> &mut ::protobuf::Chars {
        &mut self.cert_name
    }

    // Take field
    pub fn take_cert_name(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.cert_name, ::protobuf::Chars::new())
    }

    // int64 max_sequence = 6;


    pub fn get_max_sequence(&self) -> i64 {
        self.max_sequence
    }
    pub fn clear_max_sequence(&mut self) {
        self.max_sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_sequence(&mut self, v: i64) {
        self.max_sequence = v;
    }

    // bool introducer = 7;


    pub fn get_introducer(&self) -> bool {
        self.introducer
    }
    pub fn clear_introducer(&mut self) {
        self.introducer = false;
    }

    // Param is passed by value, moved
    pub fn set_introducer(&mut self, v: bool) {
        self.introducer = v;
    }

    // uint64 index_id = 8;


    pub fn get_index_id(&self) -> u64 {
        self.index_id
    }
    pub fn clear_index_id(&mut self) {
        self.index_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_index_id(&mut self, v: u64) {
        self.index_id = v;
    }

    // bool skip_introduction_removals = 9;


    pub fn get_skip_introduction_removals(&self) -> bool {
        self.skip_introduction_removals
    }
    pub fn clear_skip_introduction_removals(&mut self) {
        self.skip_introduction_removals = false;
    }

    // Param is passed by value, moved
    pub fn set_skip_introduction_removals(&mut self, v: bool) {
        self.skip_introduction_removals = v;
    }

    // bytes encryption_password_token = 10;


    pub fn get_encryption_password_token(&self) -> &[u8] {
        &self.encryption_password_token
    }
    pub fn clear_encryption_password_token(&mut self) {
        self.encryption_password_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_encryption_password_token(&mut self, v: ::bytes::Bytes) {
        self.encryption_password_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encryption_password_token(&mut self) -> &mut ::bytes::Bytes {
        &mut self.encryption_password_token
    }

    // Take field
    pub fn take_encryption_password_token(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.encryption_password_token, ::bytes::Bytes::new())
    }
}

impl ::protobuf::Message for Device {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_carllerche_string_into(wire_type, is, &mut self.addresses)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.compression, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.cert_name)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.max_sequence = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.introducer = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index_id = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.skip_introduction_removals = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.encryption_password_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.addresses {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if self.compression != Compression::COMPRESSION_METADATA {
            my_size += ::protobuf::rt::enum_size(4, self.compression);
        }
        if !self.cert_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.cert_name);
        }
        if self.max_sequence != 0 {
            my_size += ::protobuf::rt::value_size(6, self.max_sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.introducer != false {
            my_size += 2;
        }
        if self.index_id != 0 {
            my_size += ::protobuf::rt::value_size(8, self.index_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.skip_introduction_removals != false {
            my_size += 2;
        }
        if !self.encryption_password_token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.encryption_password_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.addresses {
            os.write_string(3, &v)?;
        };
        if self.compression != Compression::COMPRESSION_METADATA {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.compression))?;
        }
        if !self.cert_name.is_empty() {
            os.write_string(5, &self.cert_name)?;
        }
        if self.max_sequence != 0 {
            os.write_int64(6, self.max_sequence)?;
        }
        if self.introducer != false {
            os.write_bool(7, self.introducer)?;
        }
        if self.index_id != 0 {
            os.write_uint64(8, self.index_id)?;
        }
        if self.skip_introduction_removals != false {
            os.write_bool(9, self.skip_introduction_removals)?;
        }
        if !self.encryption_password_token.is_empty() {
            os.write_bytes(10, &self.encryption_password_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Device {
        Device::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "id",
                |m: &Device| { &m.id },
                |m: &mut Device| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "name",
                |m: &Device| { &m.name },
                |m: &mut Device| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "addresses",
                |m: &Device| { &m.addresses },
                |m: &mut Device| { &mut m.addresses },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Compression>>(
                "compression",
                |m: &Device| { &m.compression },
                |m: &mut Device| { &mut m.compression },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "cert_name",
                |m: &Device| { &m.cert_name },
                |m: &mut Device| { &mut m.cert_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "max_sequence",
                |m: &Device| { &m.max_sequence },
                |m: &mut Device| { &mut m.max_sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "introducer",
                |m: &Device| { &m.introducer },
                |m: &mut Device| { &mut m.introducer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "index_id",
                |m: &Device| { &m.index_id },
                |m: &mut Device| { &mut m.index_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "skip_introduction_removals",
                |m: &Device| { &m.skip_introduction_removals },
                |m: &mut Device| { &mut m.skip_introduction_removals },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "encryption_password_token",
                |m: &Device| { &m.encryption_password_token },
                |m: &mut Device| { &mut m.encryption_password_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Device>(
                "Device",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Device {
        static instance: ::protobuf::rt::LazyV2<Device> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Device::new)
    }
}

impl ::protobuf::Clear for Device {
    fn clear(&mut self) {
        self.id.clear();
        ::protobuf::Clear::clear(&mut self.name);
        self.addresses.clear();
        self.compression = Compression::COMPRESSION_METADATA;
        ::protobuf::Clear::clear(&mut self.cert_name);
        self.max_sequence = 0;
        self.introducer = false;
        self.index_id = 0;
        self.skip_introduction_removals = false;
        self.encryption_password_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Device {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Device {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Index {
    // message fields
    pub folder: ::protobuf::Chars,
    pub files: ::protobuf::RepeatedField<FileInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Index {
    fn default() -> &'a Index {
        <Index as ::protobuf::Message>::default_instance()
    }
}

impl Index {
    pub fn new() -> Index {
        ::std::default::Default::default()
    }

    // string folder = 1;


    pub fn get_folder(&self) -> &str {
        &self.folder
    }
    pub fn clear_folder(&mut self) {
        ::protobuf::Clear::clear(&mut self.folder);
    }

    // Param is passed by value, moved
    pub fn set_folder(&mut self, v: ::protobuf::Chars) {
        self.folder = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_folder(&mut self) -> &mut ::protobuf::Chars {
        &mut self.folder
    }

    // Take field
    pub fn take_folder(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.folder, ::protobuf::Chars::new())
    }

    // repeated .protocol.FileInfo files = 2;


    pub fn get_files(&self) -> &[FileInfo] {
        &self.files
    }
    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<FileInfo>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<FileInfo> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<FileInfo> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Index {
    fn is_initialized(&self) -> bool {
        for v in &self.files {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.folder)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.files)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.folder.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.folder);
        }
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.folder.is_empty() {
            os.write_string(1, &self.folder)?;
        }
        for v in &self.files {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Index {
        Index::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "folder",
                |m: &Index| { &m.folder },
                |m: &mut Index| { &mut m.folder },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FileInfo>>(
                "files",
                |m: &Index| { &m.files },
                |m: &mut Index| { &mut m.files },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Index>(
                "Index",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Index {
        static instance: ::protobuf::rt::LazyV2<Index> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Index::new)
    }
}

impl ::protobuf::Clear for Index {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.folder);
        self.files.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Index {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Index {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IndexUpdate {
    // message fields
    pub folder: ::protobuf::Chars,
    pub files: ::protobuf::RepeatedField<FileInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IndexUpdate {
    fn default() -> &'a IndexUpdate {
        <IndexUpdate as ::protobuf::Message>::default_instance()
    }
}

impl IndexUpdate {
    pub fn new() -> IndexUpdate {
        ::std::default::Default::default()
    }

    // string folder = 1;


    pub fn get_folder(&self) -> &str {
        &self.folder
    }
    pub fn clear_folder(&mut self) {
        ::protobuf::Clear::clear(&mut self.folder);
    }

    // Param is passed by value, moved
    pub fn set_folder(&mut self, v: ::protobuf::Chars) {
        self.folder = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_folder(&mut self) -> &mut ::protobuf::Chars {
        &mut self.folder
    }

    // Take field
    pub fn take_folder(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.folder, ::protobuf::Chars::new())
    }

    // repeated .protocol.FileInfo files = 2;


    pub fn get_files(&self) -> &[FileInfo] {
        &self.files
    }
    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<FileInfo>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<FileInfo> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<FileInfo> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for IndexUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.files {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.folder)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.files)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.folder.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.folder);
        }
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.folder.is_empty() {
            os.write_string(1, &self.folder)?;
        }
        for v in &self.files {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IndexUpdate {
        IndexUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "folder",
                |m: &IndexUpdate| { &m.folder },
                |m: &mut IndexUpdate| { &mut m.folder },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FileInfo>>(
                "files",
                |m: &IndexUpdate| { &m.files },
                |m: &mut IndexUpdate| { &mut m.files },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IndexUpdate>(
                "IndexUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IndexUpdate {
        static instance: ::protobuf::rt::LazyV2<IndexUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IndexUpdate::new)
    }
}

impl ::protobuf::Clear for IndexUpdate {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.folder);
        self.files.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IndexUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IndexUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FileInfo {
    // message fields
    pub name: ::protobuf::Chars,
    pub size: i64,
    pub modified_s: i64,
    pub modified_by: u64,
    pub version: ::protobuf::SingularPtrField<Vector>,
    pub sequence: i64,
    pub blocks: ::protobuf::RepeatedField<BlockInfo>,
    pub symlink_target: ::protobuf::Chars,
    pub blocks_hash: ::bytes::Bytes,
    pub encrypted: ::bytes::Bytes,
    pub field_type: FileInfoType,
    pub permissions: u32,
    pub modified_ns: i32,
    pub block_size: i32,
    pub local_flags: u32,
    pub version_hash: ::bytes::Bytes,
    pub deleted: bool,
    pub invalid: bool,
    pub no_permissions: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FileInfo {
    fn default() -> &'a FileInfo {
        <FileInfo as ::protobuf::Message>::default_instance()
    }
}

impl FileInfo {
    pub fn new() -> FileInfo {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        ::protobuf::Clear::clear(&mut self.name);
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::protobuf::Chars) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::protobuf::Chars {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.name, ::protobuf::Chars::new())
    }

    // int64 size = 3;


    pub fn get_size(&self) -> i64 {
        self.size
    }
    pub fn clear_size(&mut self) {
        self.size = 0;
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: i64) {
        self.size = v;
    }

    // int64 modified_s = 5;


    pub fn get_modified_s(&self) -> i64 {
        self.modified_s
    }
    pub fn clear_modified_s(&mut self) {
        self.modified_s = 0;
    }

    // Param is passed by value, moved
    pub fn set_modified_s(&mut self, v: i64) {
        self.modified_s = v;
    }

    // uint64 modified_by = 12;


    pub fn get_modified_by(&self) -> u64 {
        self.modified_by
    }
    pub fn clear_modified_by(&mut self) {
        self.modified_by = 0;
    }

    // Param is passed by value, moved
    pub fn set_modified_by(&mut self, v: u64) {
        self.modified_by = v;
    }

    // .protocol.Vector version = 9;


    pub fn get_version(&self) -> &Vector {
        self.version.as_ref().unwrap_or_else(|| <Vector as ::protobuf::Message>::default_instance())
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: Vector) {
        self.version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut Vector {
        if self.version.is_none() {
            self.version.set_default();
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> Vector {
        self.version.take().unwrap_or_else(|| Vector::new())
    }

    // int64 sequence = 10;


    pub fn get_sequence(&self) -> i64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: i64) {
        self.sequence = v;
    }

    // repeated .protocol.BlockInfo blocks = 16;


    pub fn get_blocks(&self) -> &[BlockInfo] {
        &self.blocks
    }
    pub fn clear_blocks(&mut self) {
        self.blocks.clear();
    }

    // Param is passed by value, moved
    pub fn set_blocks(&mut self, v: ::protobuf::RepeatedField<BlockInfo>) {
        self.blocks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_blocks(&mut self) -> &mut ::protobuf::RepeatedField<BlockInfo> {
        &mut self.blocks
    }

    // Take field
    pub fn take_blocks(&mut self) -> ::protobuf::RepeatedField<BlockInfo> {
        ::std::mem::replace(&mut self.blocks, ::protobuf::RepeatedField::new())
    }

    // string symlink_target = 17;


    pub fn get_symlink_target(&self) -> &str {
        &self.symlink_target
    }
    pub fn clear_symlink_target(&mut self) {
        ::protobuf::Clear::clear(&mut self.symlink_target);
    }

    // Param is passed by value, moved
    pub fn set_symlink_target(&mut self, v: ::protobuf::Chars) {
        self.symlink_target = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symlink_target(&mut self) -> &mut ::protobuf::Chars {
        &mut self.symlink_target
    }

    // Take field
    pub fn take_symlink_target(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.symlink_target, ::protobuf::Chars::new())
    }

    // bytes blocks_hash = 18;


    pub fn get_blocks_hash(&self) -> &[u8] {
        &self.blocks_hash
    }
    pub fn clear_blocks_hash(&mut self) {
        self.blocks_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_blocks_hash(&mut self, v: ::bytes::Bytes) {
        self.blocks_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blocks_hash(&mut self) -> &mut ::bytes::Bytes {
        &mut self.blocks_hash
    }

    // Take field
    pub fn take_blocks_hash(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.blocks_hash, ::bytes::Bytes::new())
    }

    // bytes encrypted = 19;


    pub fn get_encrypted(&self) -> &[u8] {
        &self.encrypted
    }
    pub fn clear_encrypted(&mut self) {
        self.encrypted.clear();
    }

    // Param is passed by value, moved
    pub fn set_encrypted(&mut self, v: ::bytes::Bytes) {
        self.encrypted = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted(&mut self) -> &mut ::bytes::Bytes {
        &mut self.encrypted
    }

    // Take field
    pub fn take_encrypted(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.encrypted, ::bytes::Bytes::new())
    }

    // .protocol.FileInfoType type = 2;


    pub fn get_field_type(&self) -> FileInfoType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = FileInfoType::FILE_INFO_TYPE_FILE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: FileInfoType) {
        self.field_type = v;
    }

    // uint32 permissions = 4;


    pub fn get_permissions(&self) -> u32 {
        self.permissions
    }
    pub fn clear_permissions(&mut self) {
        self.permissions = 0;
    }

    // Param is passed by value, moved
    pub fn set_permissions(&mut self, v: u32) {
        self.permissions = v;
    }

    // int32 modified_ns = 11;


    pub fn get_modified_ns(&self) -> i32 {
        self.modified_ns
    }
    pub fn clear_modified_ns(&mut self) {
        self.modified_ns = 0;
    }

    // Param is passed by value, moved
    pub fn set_modified_ns(&mut self, v: i32) {
        self.modified_ns = v;
    }

    // int32 block_size = 13;


    pub fn get_block_size(&self) -> i32 {
        self.block_size
    }
    pub fn clear_block_size(&mut self) {
        self.block_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_size(&mut self, v: i32) {
        self.block_size = v;
    }

    // uint32 local_flags = 1000;


    pub fn get_local_flags(&self) -> u32 {
        self.local_flags
    }
    pub fn clear_local_flags(&mut self) {
        self.local_flags = 0;
    }

    // Param is passed by value, moved
    pub fn set_local_flags(&mut self, v: u32) {
        self.local_flags = v;
    }

    // bytes version_hash = 1001;


    pub fn get_version_hash(&self) -> &[u8] {
        &self.version_hash
    }
    pub fn clear_version_hash(&mut self) {
        self.version_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_version_hash(&mut self, v: ::bytes::Bytes) {
        self.version_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version_hash(&mut self) -> &mut ::bytes::Bytes {
        &mut self.version_hash
    }

    // Take field
    pub fn take_version_hash(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.version_hash, ::bytes::Bytes::new())
    }

    // bool deleted = 6;


    pub fn get_deleted(&self) -> bool {
        self.deleted
    }
    pub fn clear_deleted(&mut self) {
        self.deleted = false;
    }

    // Param is passed by value, moved
    pub fn set_deleted(&mut self, v: bool) {
        self.deleted = v;
    }

    // bool invalid = 7;


    pub fn get_invalid(&self) -> bool {
        self.invalid
    }
    pub fn clear_invalid(&mut self) {
        self.invalid = false;
    }

    // Param is passed by value, moved
    pub fn set_invalid(&mut self, v: bool) {
        self.invalid = v;
    }

    // bool no_permissions = 8;


    pub fn get_no_permissions(&self) -> bool {
        self.no_permissions
    }
    pub fn clear_no_permissions(&mut self) {
        self.no_permissions = false;
    }

    // Param is passed by value, moved
    pub fn set_no_permissions(&mut self, v: bool) {
        self.no_permissions = v;
    }
}

impl ::protobuf::Message for FileInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.version {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.blocks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.size = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.modified_s = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.modified_by = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.version)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.sequence = tmp;
                },
                16 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.blocks)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.symlink_target)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.blocks_hash)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.encrypted)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.permissions = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.modified_ns = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.block_size = tmp;
                },
                1000 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.local_flags = tmp;
                },
                1001 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.version_hash)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.deleted = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.invalid = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.no_permissions = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.modified_s != 0 {
            my_size += ::protobuf::rt::value_size(5, self.modified_s, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.modified_by != 0 {
            my_size += ::protobuf::rt::value_size(12, self.modified_by, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(10, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.blocks {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.symlink_target.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.symlink_target);
        }
        if !self.blocks_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(18, &self.blocks_hash);
        }
        if !self.encrypted.is_empty() {
            my_size += ::protobuf::rt::bytes_size(19, &self.encrypted);
        }
        if self.field_type != FileInfoType::FILE_INFO_TYPE_FILE {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        if self.permissions != 0 {
            my_size += ::protobuf::rt::value_size(4, self.permissions, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.modified_ns != 0 {
            my_size += ::protobuf::rt::value_size(11, self.modified_ns, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block_size != 0 {
            my_size += ::protobuf::rt::value_size(13, self.block_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.local_flags != 0 {
            my_size += ::protobuf::rt::value_size(1000, self.local_flags, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.version_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1001, &self.version_hash);
        }
        if self.deleted != false {
            my_size += 2;
        }
        if self.invalid != false {
            my_size += 2;
        }
        if self.no_permissions != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.size != 0 {
            os.write_int64(3, self.size)?;
        }
        if self.modified_s != 0 {
            os.write_int64(5, self.modified_s)?;
        }
        if self.modified_by != 0 {
            os.write_uint64(12, self.modified_by)?;
        }
        if let Some(ref v) = self.version.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.sequence != 0 {
            os.write_int64(10, self.sequence)?;
        }
        for v in &self.blocks {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.symlink_target.is_empty() {
            os.write_string(17, &self.symlink_target)?;
        }
        if !self.blocks_hash.is_empty() {
            os.write_bytes(18, &self.blocks_hash)?;
        }
        if !self.encrypted.is_empty() {
            os.write_bytes(19, &self.encrypted)?;
        }
        if self.field_type != FileInfoType::FILE_INFO_TYPE_FILE {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.permissions != 0 {
            os.write_uint32(4, self.permissions)?;
        }
        if self.modified_ns != 0 {
            os.write_int32(11, self.modified_ns)?;
        }
        if self.block_size != 0 {
            os.write_int32(13, self.block_size)?;
        }
        if self.local_flags != 0 {
            os.write_uint32(1000, self.local_flags)?;
        }
        if !self.version_hash.is_empty() {
            os.write_bytes(1001, &self.version_hash)?;
        }
        if self.deleted != false {
            os.write_bool(6, self.deleted)?;
        }
        if self.invalid != false {
            os.write_bool(7, self.invalid)?;
        }
        if self.no_permissions != false {
            os.write_bool(8, self.no_permissions)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FileInfo {
        FileInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "name",
                |m: &FileInfo| { &m.name },
                |m: &mut FileInfo| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "size",
                |m: &FileInfo| { &m.size },
                |m: &mut FileInfo| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "modified_s",
                |m: &FileInfo| { &m.modified_s },
                |m: &mut FileInfo| { &mut m.modified_s },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "modified_by",
                |m: &FileInfo| { &m.modified_by },
                |m: &mut FileInfo| { &mut m.modified_by },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector>>(
                "version",
                |m: &FileInfo| { &m.version },
                |m: &mut FileInfo| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "sequence",
                |m: &FileInfo| { &m.sequence },
                |m: &mut FileInfo| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockInfo>>(
                "blocks",
                |m: &FileInfo| { &m.blocks },
                |m: &mut FileInfo| { &mut m.blocks },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "symlink_target",
                |m: &FileInfo| { &m.symlink_target },
                |m: &mut FileInfo| { &mut m.symlink_target },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "blocks_hash",
                |m: &FileInfo| { &m.blocks_hash },
                |m: &mut FileInfo| { &mut m.blocks_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "encrypted",
                |m: &FileInfo| { &m.encrypted },
                |m: &mut FileInfo| { &mut m.encrypted },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FileInfoType>>(
                "type",
                |m: &FileInfo| { &m.field_type },
                |m: &mut FileInfo| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "permissions",
                |m: &FileInfo| { &m.permissions },
                |m: &mut FileInfo| { &mut m.permissions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "modified_ns",
                |m: &FileInfo| { &m.modified_ns },
                |m: &mut FileInfo| { &mut m.modified_ns },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "block_size",
                |m: &FileInfo| { &m.block_size },
                |m: &mut FileInfo| { &mut m.block_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "local_flags",
                |m: &FileInfo| { &m.local_flags },
                |m: &mut FileInfo| { &mut m.local_flags },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "version_hash",
                |m: &FileInfo| { &m.version_hash },
                |m: &mut FileInfo| { &mut m.version_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "deleted",
                |m: &FileInfo| { &m.deleted },
                |m: &mut FileInfo| { &mut m.deleted },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "invalid",
                |m: &FileInfo| { &m.invalid },
                |m: &mut FileInfo| { &mut m.invalid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "no_permissions",
                |m: &FileInfo| { &m.no_permissions },
                |m: &mut FileInfo| { &mut m.no_permissions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FileInfo>(
                "FileInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FileInfo {
        static instance: ::protobuf::rt::LazyV2<FileInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FileInfo::new)
    }
}

impl ::protobuf::Clear for FileInfo {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.name);
        self.size = 0;
        self.modified_s = 0;
        self.modified_by = 0;
        self.version.clear();
        self.sequence = 0;
        self.blocks.clear();
        ::protobuf::Clear::clear(&mut self.symlink_target);
        self.blocks_hash.clear();
        self.encrypted.clear();
        self.field_type = FileInfoType::FILE_INFO_TYPE_FILE;
        self.permissions = 0;
        self.modified_ns = 0;
        self.block_size = 0;
        self.local_flags = 0;
        self.version_hash.clear();
        self.deleted = false;
        self.invalid = false;
        self.no_permissions = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FileInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockInfo {
    // message fields
    pub hash: ::bytes::Bytes,
    pub offset: i64,
    pub size: i32,
    pub weak_hash: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockInfo {
    fn default() -> &'a BlockInfo {
        <BlockInfo as ::protobuf::Message>::default_instance()
    }
}

impl BlockInfo {
    pub fn new() -> BlockInfo {
        ::std::default::Default::default()
    }

    // bytes hash = 3;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::bytes::Bytes) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::bytes::Bytes {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.hash, ::bytes::Bytes::new())
    }

    // int64 offset = 1;


    pub fn get_offset(&self) -> i64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i64) {
        self.offset = v;
    }

    // int32 size = 2;


    pub fn get_size(&self) -> i32 {
        self.size
    }
    pub fn clear_size(&mut self) {
        self.size = 0;
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: i32) {
        self.size = v;
    }

    // uint32 weak_hash = 4;


    pub fn get_weak_hash(&self) -> u32 {
        self.weak_hash
    }
    pub fn clear_weak_hash(&mut self) {
        self.weak_hash = 0;
    }

    // Param is passed by value, moved
    pub fn set_weak_hash(&mut self, v: u32) {
        self.weak_hash = v;
    }
}

impl ::protobuf::Message for BlockInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.hash)?;
                },
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.offset = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.size = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.weak_hash = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.hash);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(1, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.weak_hash != 0 {
            my_size += ::protobuf::rt::value_size(4, self.weak_hash, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_bytes(3, &self.hash)?;
        }
        if self.offset != 0 {
            os.write_int64(1, self.offset)?;
        }
        if self.size != 0 {
            os.write_int32(2, self.size)?;
        }
        if self.weak_hash != 0 {
            os.write_uint32(4, self.weak_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockInfo {
        BlockInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "hash",
                |m: &BlockInfo| { &m.hash },
                |m: &mut BlockInfo| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "offset",
                |m: &BlockInfo| { &m.offset },
                |m: &mut BlockInfo| { &mut m.offset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "size",
                |m: &BlockInfo| { &m.size },
                |m: &mut BlockInfo| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "weak_hash",
                |m: &BlockInfo| { &m.weak_hash },
                |m: &mut BlockInfo| { &mut m.weak_hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockInfo>(
                "BlockInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockInfo {
        static instance: ::protobuf::rt::LazyV2<BlockInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockInfo::new)
    }
}

impl ::protobuf::Clear for BlockInfo {
    fn clear(&mut self) {
        self.hash.clear();
        self.offset = 0;
        self.size = 0;
        self.weak_hash = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Vector {
    // message fields
    pub counters: ::protobuf::RepeatedField<Counter>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Vector {
    fn default() -> &'a Vector {
        <Vector as ::protobuf::Message>::default_instance()
    }
}

impl Vector {
    pub fn new() -> Vector {
        ::std::default::Default::default()
    }

    // repeated .protocol.Counter counters = 1;


    pub fn get_counters(&self) -> &[Counter] {
        &self.counters
    }
    pub fn clear_counters(&mut self) {
        self.counters.clear();
    }

    // Param is passed by value, moved
    pub fn set_counters(&mut self, v: ::protobuf::RepeatedField<Counter>) {
        self.counters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_counters(&mut self) -> &mut ::protobuf::RepeatedField<Counter> {
        &mut self.counters
    }

    // Take field
    pub fn take_counters(&mut self) -> ::protobuf::RepeatedField<Counter> {
        ::std::mem::replace(&mut self.counters, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Vector {
    fn is_initialized(&self) -> bool {
        for v in &self.counters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.counters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.counters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.counters {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Vector {
        Vector::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Counter>>(
                "counters",
                |m: &Vector| { &m.counters },
                |m: &mut Vector| { &mut m.counters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Vector>(
                "Vector",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Vector {
        static instance: ::protobuf::rt::LazyV2<Vector> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Vector::new)
    }
}

impl ::protobuf::Clear for Vector {
    fn clear(&mut self) {
        self.counters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Vector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vector {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Counter {
    // message fields
    pub id: u64,
    pub value: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Counter {
    fn default() -> &'a Counter {
        <Counter as ::protobuf::Message>::default_instance()
    }
}

impl Counter {
    pub fn new() -> Counter {
        ::std::default::Default::default()
    }

    // uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // uint64 value = 2;


    pub fn get_value(&self) -> u64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u64) {
        self.value = v;
    }
}

impl ::protobuf::Message for Counter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(2, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.value != 0 {
            os.write_uint64(2, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Counter {
        Counter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &Counter| { &m.id },
                |m: &mut Counter| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "value",
                |m: &Counter| { &m.value },
                |m: &mut Counter| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Counter>(
                "Counter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Counter {
        static instance: ::protobuf::rt::LazyV2<Counter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Counter::new)
    }
}

impl ::protobuf::Clear for Counter {
    fn clear(&mut self) {
        self.id = 0;
        self.value = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Counter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Counter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // message fields
    pub id: i32,
    pub folder: ::protobuf::Chars,
    pub name: ::protobuf::Chars,
    pub offset: i64,
    pub size: i32,
    pub hash: ::bytes::Bytes,
    pub from_temporary: bool,
    pub weak_hash: u32,
    pub block_no: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // int32 id = 1;


    pub fn get_id(&self) -> i32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }

    // string folder = 2;


    pub fn get_folder(&self) -> &str {
        &self.folder
    }
    pub fn clear_folder(&mut self) {
        ::protobuf::Clear::clear(&mut self.folder);
    }

    // Param is passed by value, moved
    pub fn set_folder(&mut self, v: ::protobuf::Chars) {
        self.folder = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_folder(&mut self) -> &mut ::protobuf::Chars {
        &mut self.folder
    }

    // Take field
    pub fn take_folder(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.folder, ::protobuf::Chars::new())
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        ::protobuf::Clear::clear(&mut self.name);
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::protobuf::Chars) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::protobuf::Chars {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.name, ::protobuf::Chars::new())
    }

    // int64 offset = 4;


    pub fn get_offset(&self) -> i64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i64) {
        self.offset = v;
    }

    // int32 size = 5;


    pub fn get_size(&self) -> i32 {
        self.size
    }
    pub fn clear_size(&mut self) {
        self.size = 0;
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: i32) {
        self.size = v;
    }

    // bytes hash = 6;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::bytes::Bytes) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::bytes::Bytes {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.hash, ::bytes::Bytes::new())
    }

    // bool from_temporary = 7;


    pub fn get_from_temporary(&self) -> bool {
        self.from_temporary
    }
    pub fn clear_from_temporary(&mut self) {
        self.from_temporary = false;
    }

    // Param is passed by value, moved
    pub fn set_from_temporary(&mut self, v: bool) {
        self.from_temporary = v;
    }

    // uint32 weak_hash = 8;


    pub fn get_weak_hash(&self) -> u32 {
        self.weak_hash
    }
    pub fn clear_weak_hash(&mut self) {
        self.weak_hash = 0;
    }

    // Param is passed by value, moved
    pub fn set_weak_hash(&mut self, v: u32) {
        self.weak_hash = v;
    }

    // int32 block_no = 9;


    pub fn get_block_no(&self) -> i32 {
        self.block_no
    }
    pub fn clear_block_no(&mut self) {
        self.block_no = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_no(&mut self, v: i32) {
        self.block_no = v;
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.folder)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.offset = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.size = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.hash)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.from_temporary = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.weak_hash = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.block_no = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.folder.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.folder);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(4, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::value_size(5, self.size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.hash);
        }
        if self.from_temporary != false {
            my_size += 2;
        }
        if self.weak_hash != 0 {
            my_size += ::protobuf::rt::value_size(8, self.weak_hash, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block_no != 0 {
            my_size += ::protobuf::rt::value_size(9, self.block_no, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if !self.folder.is_empty() {
            os.write_string(2, &self.folder)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if self.offset != 0 {
            os.write_int64(4, self.offset)?;
        }
        if self.size != 0 {
            os.write_int32(5, self.size)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(6, &self.hash)?;
        }
        if self.from_temporary != false {
            os.write_bool(7, self.from_temporary)?;
        }
        if self.weak_hash != 0 {
            os.write_uint32(8, self.weak_hash)?;
        }
        if self.block_no != 0 {
            os.write_int32(9, self.block_no)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "id",
                |m: &Request| { &m.id },
                |m: &mut Request| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "folder",
                |m: &Request| { &m.folder },
                |m: &mut Request| { &mut m.folder },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "name",
                |m: &Request| { &m.name },
                |m: &mut Request| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "offset",
                |m: &Request| { &m.offset },
                |m: &mut Request| { &mut m.offset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "size",
                |m: &Request| { &m.size },
                |m: &mut Request| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "hash",
                |m: &Request| { &m.hash },
                |m: &mut Request| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "from_temporary",
                |m: &Request| { &m.from_temporary },
                |m: &mut Request| { &mut m.from_temporary },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "weak_hash",
                |m: &Request| { &m.weak_hash },
                |m: &mut Request| { &mut m.weak_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "block_no",
                |m: &Request| { &m.block_no },
                |m: &mut Request| { &mut m.block_no },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Request>(
                "Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Request {
        static instance: ::protobuf::rt::LazyV2<Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Request::new)
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.id = 0;
        ::protobuf::Clear::clear(&mut self.folder);
        ::protobuf::Clear::clear(&mut self.name);
        self.offset = 0;
        self.size = 0;
        self.hash.clear();
        self.from_temporary = false;
        self.weak_hash = 0;
        self.block_no = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message fields
    pub id: i32,
    pub data: ::bytes::Bytes,
    pub code: ErrorCode,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // int32 id = 1;


    pub fn get_id(&self) -> i32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::bytes::Bytes) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::bytes::Bytes {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.data, ::bytes::Bytes::new())
    }

    // .protocol.ErrorCode code = 3;


    pub fn get_code(&self) -> ErrorCode {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = ErrorCode::ERROR_CODE_NO_ERROR;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ErrorCode) {
        self.code = v;
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.data)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.code, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        if self.code != ErrorCode::ERROR_CODE_NO_ERROR {
            my_size += ::protobuf::rt::enum_size(3, self.code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        if self.code != ErrorCode::ERROR_CODE_NO_ERROR {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.code))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "id",
                |m: &Response| { &m.id },
                |m: &mut Response| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "data",
                |m: &Response| { &m.data },
                |m: &mut Response| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ErrorCode>>(
                "code",
                |m: &Response| { &m.code },
                |m: &mut Response| { &mut m.code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Response>(
                "Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Response {
        static instance: ::protobuf::rt::LazyV2<Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Response::new)
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.id = 0;
        self.data.clear();
        self.code = ErrorCode::ERROR_CODE_NO_ERROR;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DownloadProgress {
    // message fields
    pub folder: ::protobuf::Chars,
    pub updates: ::protobuf::RepeatedField<FileDownloadProgressUpdate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DownloadProgress {
    fn default() -> &'a DownloadProgress {
        <DownloadProgress as ::protobuf::Message>::default_instance()
    }
}

impl DownloadProgress {
    pub fn new() -> DownloadProgress {
        ::std::default::Default::default()
    }

    // string folder = 1;


    pub fn get_folder(&self) -> &str {
        &self.folder
    }
    pub fn clear_folder(&mut self) {
        ::protobuf::Clear::clear(&mut self.folder);
    }

    // Param is passed by value, moved
    pub fn set_folder(&mut self, v: ::protobuf::Chars) {
        self.folder = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_folder(&mut self) -> &mut ::protobuf::Chars {
        &mut self.folder
    }

    // Take field
    pub fn take_folder(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.folder, ::protobuf::Chars::new())
    }

    // repeated .protocol.FileDownloadProgressUpdate updates = 2;


    pub fn get_updates(&self) -> &[FileDownloadProgressUpdate] {
        &self.updates
    }
    pub fn clear_updates(&mut self) {
        self.updates.clear();
    }

    // Param is passed by value, moved
    pub fn set_updates(&mut self, v: ::protobuf::RepeatedField<FileDownloadProgressUpdate>) {
        self.updates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_updates(&mut self) -> &mut ::protobuf::RepeatedField<FileDownloadProgressUpdate> {
        &mut self.updates
    }

    // Take field
    pub fn take_updates(&mut self) -> ::protobuf::RepeatedField<FileDownloadProgressUpdate> {
        ::std::mem::replace(&mut self.updates, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DownloadProgress {
    fn is_initialized(&self) -> bool {
        for v in &self.updates {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.folder)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.updates)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.folder.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.folder);
        }
        for value in &self.updates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.folder.is_empty() {
            os.write_string(1, &self.folder)?;
        }
        for v in &self.updates {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DownloadProgress {
        DownloadProgress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "folder",
                |m: &DownloadProgress| { &m.folder },
                |m: &mut DownloadProgress| { &mut m.folder },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FileDownloadProgressUpdate>>(
                "updates",
                |m: &DownloadProgress| { &m.updates },
                |m: &mut DownloadProgress| { &mut m.updates },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DownloadProgress>(
                "DownloadProgress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DownloadProgress {
        static instance: ::protobuf::rt::LazyV2<DownloadProgress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DownloadProgress::new)
    }
}

impl ::protobuf::Clear for DownloadProgress {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.folder);
        self.updates.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DownloadProgress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownloadProgress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FileDownloadProgressUpdate {
    // message fields
    pub update_type: FileDownloadProgressUpdateType,
    pub name: ::protobuf::Chars,
    pub version: ::protobuf::SingularPtrField<Vector>,
    pub block_indexes: ::std::vec::Vec<i32>,
    pub block_size: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FileDownloadProgressUpdate {
    fn default() -> &'a FileDownloadProgressUpdate {
        <FileDownloadProgressUpdate as ::protobuf::Message>::default_instance()
    }
}

impl FileDownloadProgressUpdate {
    pub fn new() -> FileDownloadProgressUpdate {
        ::std::default::Default::default()
    }

    // .protocol.FileDownloadProgressUpdateType update_type = 1;


    pub fn get_update_type(&self) -> FileDownloadProgressUpdateType {
        self.update_type
    }
    pub fn clear_update_type(&mut self) {
        self.update_type = FileDownloadProgressUpdateType::FILE_DOWNLOAD_PROGRESS_UPDATE_TYPE_APPEND;
    }

    // Param is passed by value, moved
    pub fn set_update_type(&mut self, v: FileDownloadProgressUpdateType) {
        self.update_type = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        ::protobuf::Clear::clear(&mut self.name);
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::protobuf::Chars) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::protobuf::Chars {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.name, ::protobuf::Chars::new())
    }

    // .protocol.Vector version = 3;


    pub fn get_version(&self) -> &Vector {
        self.version.as_ref().unwrap_or_else(|| <Vector as ::protobuf::Message>::default_instance())
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: Vector) {
        self.version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut Vector {
        if self.version.is_none() {
            self.version.set_default();
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> Vector {
        self.version.take().unwrap_or_else(|| Vector::new())
    }

    // repeated int32 block_indexes = 4;


    pub fn get_block_indexes(&self) -> &[i32] {
        &self.block_indexes
    }
    pub fn clear_block_indexes(&mut self) {
        self.block_indexes.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_indexes(&mut self, v: ::std::vec::Vec<i32>) {
        self.block_indexes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_block_indexes(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.block_indexes
    }

    // Take field
    pub fn take_block_indexes(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.block_indexes, ::std::vec::Vec::new())
    }

    // int32 block_size = 5;


    pub fn get_block_size(&self) -> i32 {
        self.block_size
    }
    pub fn clear_block_size(&mut self) {
        self.block_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_size(&mut self, v: i32) {
        self.block_size = v;
    }
}

impl ::protobuf::Message for FileDownloadProgressUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.version {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.update_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.version)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.block_indexes)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.block_size = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.update_type != FileDownloadProgressUpdateType::FILE_DOWNLOAD_PROGRESS_UPDATE_TYPE_APPEND {
            my_size += ::protobuf::rt::enum_size(1, self.update_type);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if let Some(ref v) = self.version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.block_indexes {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.block_size != 0 {
            my_size += ::protobuf::rt::value_size(5, self.block_size, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.update_type != FileDownloadProgressUpdateType::FILE_DOWNLOAD_PROGRESS_UPDATE_TYPE_APPEND {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.update_type))?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if let Some(ref v) = self.version.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.block_indexes {
            os.write_int32(4, *v)?;
        };
        if self.block_size != 0 {
            os.write_int32(5, self.block_size)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FileDownloadProgressUpdate {
        FileDownloadProgressUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FileDownloadProgressUpdateType>>(
                "update_type",
                |m: &FileDownloadProgressUpdate| { &m.update_type },
                |m: &mut FileDownloadProgressUpdate| { &mut m.update_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "name",
                |m: &FileDownloadProgressUpdate| { &m.name },
                |m: &mut FileDownloadProgressUpdate| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector>>(
                "version",
                |m: &FileDownloadProgressUpdate| { &m.version },
                |m: &mut FileDownloadProgressUpdate| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "block_indexes",
                |m: &FileDownloadProgressUpdate| { &m.block_indexes },
                |m: &mut FileDownloadProgressUpdate| { &mut m.block_indexes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "block_size",
                |m: &FileDownloadProgressUpdate| { &m.block_size },
                |m: &mut FileDownloadProgressUpdate| { &mut m.block_size },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FileDownloadProgressUpdate>(
                "FileDownloadProgressUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FileDownloadProgressUpdate {
        static instance: ::protobuf::rt::LazyV2<FileDownloadProgressUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FileDownloadProgressUpdate::new)
    }
}

impl ::protobuf::Clear for FileDownloadProgressUpdate {
    fn clear(&mut self) {
        self.update_type = FileDownloadProgressUpdateType::FILE_DOWNLOAD_PROGRESS_UPDATE_TYPE_APPEND;
        ::protobuf::Clear::clear(&mut self.name);
        self.version.clear();
        self.block_indexes.clear();
        self.block_size = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FileDownloadProgressUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileDownloadProgressUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ping {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Ping {
    fn default() -> &'a Ping {
        <Ping as ::protobuf::Message>::default_instance()
    }
}

impl Ping {
    pub fn new() -> Ping {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Ping {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ping {
        Ping::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Ping>(
                "Ping",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Ping {
        static instance: ::protobuf::rt::LazyV2<Ping> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Ping::new)
    }
}

impl ::protobuf::Clear for Ping {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ping {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Close {
    // message fields
    pub reason: ::protobuf::Chars,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Close {
    fn default() -> &'a Close {
        <Close as ::protobuf::Message>::default_instance()
    }
}

impl Close {
    pub fn new() -> Close {
        ::std::default::Default::default()
    }

    // string reason = 1;


    pub fn get_reason(&self) -> &str {
        &self.reason
    }
    pub fn clear_reason(&mut self) {
        ::protobuf::Clear::clear(&mut self.reason);
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::protobuf::Chars) {
        self.reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::protobuf::Chars {
        &mut self.reason
    }

    // Take field
    pub fn take_reason(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.reason, ::protobuf::Chars::new())
    }
}

impl ::protobuf::Message for Close {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.reason)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.reason);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.reason.is_empty() {
            os.write_string(1, &self.reason)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Close {
        Close::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "reason",
                |m: &Close| { &m.reason },
                |m: &mut Close| { &mut m.reason },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Close>(
                "Close",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Close {
        static instance: ::protobuf::rt::LazyV2<Close> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Close::new)
    }
}

impl ::protobuf::Clear for Close {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.reason);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Close {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Close {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MessageType {
    MESSAGE_TYPE_CLUSTER_CONFIG = 0,
    MESSAGE_TYPE_INDEX = 1,
    MESSAGE_TYPE_INDEX_UPDATE = 2,
    MESSAGE_TYPE_REQUEST = 3,
    MESSAGE_TYPE_RESPONSE = 4,
    MESSAGE_TYPE_DOWNLOAD_PROGRESS = 5,
    MESSAGE_TYPE_PING = 6,
    MESSAGE_TYPE_CLOSE = 7,
}

impl ::protobuf::ProtobufEnum for MessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MessageType> {
        match value {
            0 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_CLUSTER_CONFIG),
            1 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_INDEX),
            2 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_INDEX_UPDATE),
            3 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_REQUEST),
            4 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_RESPONSE),
            5 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_DOWNLOAD_PROGRESS),
            6 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_PING),
            7 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_CLOSE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MessageType] = &[
            MessageType::MESSAGE_TYPE_CLUSTER_CONFIG,
            MessageType::MESSAGE_TYPE_INDEX,
            MessageType::MESSAGE_TYPE_INDEX_UPDATE,
            MessageType::MESSAGE_TYPE_REQUEST,
            MessageType::MESSAGE_TYPE_RESPONSE,
            MessageType::MESSAGE_TYPE_DOWNLOAD_PROGRESS,
            MessageType::MESSAGE_TYPE_PING,
            MessageType::MESSAGE_TYPE_CLOSE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MessageType>("MessageType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MessageType {
}

impl ::std::default::Default for MessageType {
    fn default() -> Self {
        MessageType::MESSAGE_TYPE_CLUSTER_CONFIG
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MessageCompression {
    MESSAGE_COMPRESSION_NONE = 0,
    MESSAGE_COMPRESSION_LZ4 = 1,
}

impl ::protobuf::ProtobufEnum for MessageCompression {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MessageCompression> {
        match value {
            0 => ::std::option::Option::Some(MessageCompression::MESSAGE_COMPRESSION_NONE),
            1 => ::std::option::Option::Some(MessageCompression::MESSAGE_COMPRESSION_LZ4),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MessageCompression] = &[
            MessageCompression::MESSAGE_COMPRESSION_NONE,
            MessageCompression::MESSAGE_COMPRESSION_LZ4,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MessageCompression>("MessageCompression", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MessageCompression {
}

impl ::std::default::Default for MessageCompression {
    fn default() -> Self {
        MessageCompression::MESSAGE_COMPRESSION_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageCompression {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Compression {
    COMPRESSION_METADATA = 0,
    COMPRESSION_NEVER = 1,
    COMPRESSION_ALWAYS = 2,
}

impl ::protobuf::ProtobufEnum for Compression {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Compression> {
        match value {
            0 => ::std::option::Option::Some(Compression::COMPRESSION_METADATA),
            1 => ::std::option::Option::Some(Compression::COMPRESSION_NEVER),
            2 => ::std::option::Option::Some(Compression::COMPRESSION_ALWAYS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Compression] = &[
            Compression::COMPRESSION_METADATA,
            Compression::COMPRESSION_NEVER,
            Compression::COMPRESSION_ALWAYS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Compression>("Compression", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Compression {
}

impl ::std::default::Default for Compression {
    fn default() -> Self {
        Compression::COMPRESSION_METADATA
    }
}

impl ::protobuf::reflect::ProtobufValue for Compression {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FileInfoType {
    FILE_INFO_TYPE_FILE = 0,
    FILE_INFO_TYPE_DIRECTORY = 1,
    FILE_INFO_TYPE_SYMLINK_FILE = 2,
    FILE_INFO_TYPE_SYMLINK_DIRECTORY = 3,
    FILE_INFO_TYPE_SYMLINK = 4,
}

impl ::protobuf::ProtobufEnum for FileInfoType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FileInfoType> {
        match value {
            0 => ::std::option::Option::Some(FileInfoType::FILE_INFO_TYPE_FILE),
            1 => ::std::option::Option::Some(FileInfoType::FILE_INFO_TYPE_DIRECTORY),
            2 => ::std::option::Option::Some(FileInfoType::FILE_INFO_TYPE_SYMLINK_FILE),
            3 => ::std::option::Option::Some(FileInfoType::FILE_INFO_TYPE_SYMLINK_DIRECTORY),
            4 => ::std::option::Option::Some(FileInfoType::FILE_INFO_TYPE_SYMLINK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FileInfoType] = &[
            FileInfoType::FILE_INFO_TYPE_FILE,
            FileInfoType::FILE_INFO_TYPE_DIRECTORY,
            FileInfoType::FILE_INFO_TYPE_SYMLINK_FILE,
            FileInfoType::FILE_INFO_TYPE_SYMLINK_DIRECTORY,
            FileInfoType::FILE_INFO_TYPE_SYMLINK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FileInfoType>("FileInfoType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FileInfoType {
}

impl ::std::default::Default for FileInfoType {
    fn default() -> Self {
        FileInfoType::FILE_INFO_TYPE_FILE
    }
}

impl ::protobuf::reflect::ProtobufValue for FileInfoType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ErrorCode {
    ERROR_CODE_NO_ERROR = 0,
    ERROR_CODE_GENERIC = 1,
    ERROR_CODE_NO_SUCH_FILE = 2,
    ERROR_CODE_INVALID_FILE = 3,
}

impl ::protobuf::ProtobufEnum for ErrorCode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorCode> {
        match value {
            0 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_NO_ERROR),
            1 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_GENERIC),
            2 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_NO_SUCH_FILE),
            3 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_INVALID_FILE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ErrorCode] = &[
            ErrorCode::ERROR_CODE_NO_ERROR,
            ErrorCode::ERROR_CODE_GENERIC,
            ErrorCode::ERROR_CODE_NO_SUCH_FILE,
            ErrorCode::ERROR_CODE_INVALID_FILE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ErrorCode>("ErrorCode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ErrorCode {
}

impl ::std::default::Default for ErrorCode {
    fn default() -> Self {
        ErrorCode::ERROR_CODE_NO_ERROR
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorCode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FileDownloadProgressUpdateType {
    FILE_DOWNLOAD_PROGRESS_UPDATE_TYPE_APPEND = 0,
    FILE_DOWNLOAD_PROGRESS_UPDATE_TYPE_FORGET = 1,
}

impl ::protobuf::ProtobufEnum for FileDownloadProgressUpdateType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FileDownloadProgressUpdateType> {
        match value {
            0 => ::std::option::Option::Some(FileDownloadProgressUpdateType::FILE_DOWNLOAD_PROGRESS_UPDATE_TYPE_APPEND),
            1 => ::std::option::Option::Some(FileDownloadProgressUpdateType::FILE_DOWNLOAD_PROGRESS_UPDATE_TYPE_FORGET),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FileDownloadProgressUpdateType] = &[
            FileDownloadProgressUpdateType::FILE_DOWNLOAD_PROGRESS_UPDATE_TYPE_APPEND,
            FileDownloadProgressUpdateType::FILE_DOWNLOAD_PROGRESS_UPDATE_TYPE_FORGET,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FileDownloadProgressUpdateType>("FileDownloadProgressUpdateType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FileDownloadProgressUpdateType {
}

impl ::std::default::Default for FileDownloadProgressUpdateType {
    fn default() -> Self {
        FileDownloadProgressUpdateType::FILE_DOWNLOAD_PROGRESS_UPDATE_TYPE_APPEND
    }
}

impl ::protobuf::reflect::ProtobufValue for FileDownloadProgressUpdateType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tbep.proto\x12\x08protocol\x1a\text.proto\"p\n\x05Hello\x12\x1f\n\x0b\
    device_name\x18\x01\x20\x01(\tR\ndeviceName\x12\x1f\n\x0bclient_name\x18\
    \x02\x20\x01(\tR\nclientName\x12%\n\x0eclient_version\x18\x03\x20\x01(\t\
    R\rclientVersion\"s\n\x06Header\x12)\n\x04type\x18\x01\x20\x01(\x0e2\x15\
    .protocol.MessageTypeR\x04type\x12>\n\x0bcompression\x18\x02\x20\x01(\
    \x0e2\x1c.protocol.MessageCompressionR\x0bcompression\";\n\rClusterConfi\
    g\x12*\n\x07folders\x18\x01\x20\x03(\x0b2\x10.protocol.FolderR\x07folder\
    s\"\x9d\x02\n\x06Folder\x12\x16\n\x02id\x18\x01\x20\x01(\tR\x02idB\x06\
    \x92\xd0$\x02ID\x12\x14\n\x05label\x18\x02\x20\x01(\tR\x05label\x12\x1b\
    \n\tread_only\x18\x03\x20\x01(\x08R\x08readOnly\x12-\n\x12ignore_permiss\
    ions\x18\x04\x20\x01(\x08R\x11ignorePermissions\x12#\n\rignore_delete\
    \x18\x05\x20\x01(\x08R\x0cignoreDelete\x120\n\x14disable_temp_indexes\
    \x18\x06\x20\x01(\x08R\x12disableTempIndexes\x12\x16\n\x06paused\x18\x07\
    \x20\x01(\x08R\x06paused\x12*\n\x07devices\x18\x10\x20\x03(\x0b2\x10.pro\
    tocol.DeviceR\x07devices\"\x9c\x03\n\x06Device\x12\x1a\n\x02id\x18\x01\
    \x20\x01(\x0cR\x02idB\n\x88\xd0$\x01\x92\xd0$\x02ID\x12\x12\n\x04name\
    \x18\x02\x20\x01(\tR\x04name\x12\x1c\n\taddresses\x18\x03\x20\x03(\tR\ta\
    ddresses\x127\n\x0bcompression\x18\x04\x20\x01(\x0e2\x15.protocol.Compre\
    ssionR\x0bcompression\x12\x1b\n\tcert_name\x18\x05\x20\x01(\tR\x08certNa\
    me\x12!\n\x0cmax_sequence\x18\x06\x20\x01(\x03R\x0bmaxSequence\x12\x1e\n\
    \nintroducer\x18\x07\x20\x01(\x08R\nintroducer\x121\n\x08index_id\x18\
    \x08\x20\x01(\x04R\x07indexIdB\x16\x9a\xd0$\x07IndexID\x92\xd0$\x07Index\
    ID\x12<\n\x1askip_introduction_removals\x18\t\x20\x01(\x08R\x18skipIntro\
    ductionRemovals\x12:\n\x19encryption_password_token\x18\n\x20\x01(\x0cR\
    \x17encryptionPasswordToken\"I\n\x05Index\x12\x16\n\x06folder\x18\x01\
    \x20\x01(\tR\x06folder\x12(\n\x05files\x18\x02\x20\x03(\x0b2\x12.protoco\
    l.FileInfoR\x05files\"O\n\x0bIndexUpdate\x12\x16\n\x06folder\x18\x01\x20\
    \x01(\tR\x06folder\x12(\n\x05files\x18\x02\x20\x03(\x0b2\x12.protocol.Fi\
    leInfoR\x05files\"\xab\x05\n\x08FileInfo\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\x12\x12\n\x04size\x18\x03\x20\x01(\x03R\x04size\x12\x1d\
    \n\nmodified_s\x18\x05\x20\x01(\x03R\tmodifiedS\x12,\n\x0bmodified_by\
    \x18\x0c\x20\x01(\x04R\nmodifiedByB\x0b\x9a\xd0$\x07ShortID\x12*\n\x07ve\
    rsion\x18\t\x20\x01(\x0b2\x10.protocol.VectorR\x07version\x12\x1a\n\x08s\
    equence\x18\n\x20\x01(\x03R\x08sequence\x12+\n\x06blocks\x18\x10\x20\x03\
    (\x0b2\x13.protocol.BlockInfoR\x06blocks\x12%\n\x0esymlink_target\x18\
    \x11\x20\x01(\tR\rsymlinkTarget\x12\x1f\n\x0bblocks_hash\x18\x12\x20\x01\
    (\x0cR\nblocksHash\x12\x1c\n\tencrypted\x18\x13\x20\x01(\x0cR\tencrypted\
    \x12*\n\x04type\x18\x02\x20\x01(\x0e2\x16.protocol.FileInfoTypeR\x04type\
    \x12\x20\n\x0bpermissions\x18\x04\x20\x01(\rR\x0bpermissions\x12\x1f\n\
    \x0bmodified_ns\x18\x0b\x20\x01(\x05R\nmodifiedNs\x12/\n\nblock_size\x18\
    \r\x20\x01(\x05R\tblockSizeB\x10\x92\xd0$\x0cRawBlockSize\x12\x20\n\x0bl\
    ocal_flags\x18\xe8\x07\x20\x01(\rR\nlocalFlags\x12\"\n\x0cversion_hash\
    \x18\xe9\x07\x20\x01(\x0cR\x0bversionHash\x12\x18\n\x07deleted\x18\x06\
    \x20\x01(\x08R\x07deleted\x12(\n\x07invalid\x18\x07\x20\x01(\x08R\x07inv\
    alidB\x0e\x92\xd0$\nRawInvalid\x12%\n\x0eno_permissions\x18\x08\x20\x01(\
    \x08R\rnoPermissions\"h\n\tBlockInfo\x12\x12\n\x04hash\x18\x03\x20\x01(\
    \x0cR\x04hash\x12\x16\n\x06offset\x18\x01\x20\x01(\x03R\x06offset\x12\
    \x12\n\x04size\x18\x02\x20\x01(\x05R\x04size\x12\x1b\n\tweak_hash\x18\
    \x04\x20\x01(\rR\x08weakHash\"7\n\x06Vector\x12-\n\x08counters\x18\x01\
    \x20\x03(\x0b2\x11.protocol.CounterR\x08counters\"B\n\x07Counter\x12!\n\
    \x02id\x18\x01\x20\x01(\x04R\x02idB\x11\x9a\xd0$\x07ShortID\x92\xd0$\x02\
    ID\x12\x14\n\x05value\x18\x02\x20\x01(\x04R\x05value\"\xec\x01\n\x07Requ\
    est\x12\x16\n\x02id\x18\x01\x20\x01(\x05R\x02idB\x06\x92\xd0$\x02ID\x12\
    \x16\n\x06folder\x18\x02\x20\x01(\tR\x06folder\x12\x12\n\x04name\x18\x03\
    \x20\x01(\tR\x04name\x12\x16\n\x06offset\x18\x04\x20\x01(\x03R\x06offset\
    \x12\x12\n\x04size\x18\x05\x20\x01(\x05R\x04size\x12\x12\n\x04hash\x18\
    \x06\x20\x01(\x0cR\x04hash\x12%\n\x0efrom_temporary\x18\x07\x20\x01(\x08\
    R\rfromTemporary\x12\x1b\n\tweak_hash\x18\x08\x20\x01(\rR\x08weakHash\
    \x12\x19\n\x08block_no\x18\t\x20\x01(\x05R\x07blockNo\"_\n\x08Response\
    \x12\x16\n\x02id\x18\x01\x20\x01(\x05R\x02idB\x06\x92\xd0$\x02ID\x12\x12\
    \n\x04data\x18\x02\x20\x01(\x0cR\x04data\x12'\n\x04code\x18\x03\x20\x01(\
    \x0e2\x13.protocol.ErrorCodeR\x04code\"j\n\x10DownloadProgress\x12\x16\n\
    \x06folder\x18\x01\x20\x01(\tR\x06folder\x12>\n\x07updates\x18\x02\x20\
    \x03(\x0b2$.protocol.FileDownloadProgressUpdateR\x07updates\"\xef\x01\n\
    \x1aFileDownloadProgressUpdate\x12I\n\x0bupdate_type\x18\x01\x20\x01(\
    \x0e2(.protocol.FileDownloadProgressUpdateTypeR\nupdateType\x12\x12\n\
    \x04name\x18\x02\x20\x01(\tR\x04name\x12*\n\x07version\x18\x03\x20\x01(\
    \x0b2\x10.protocol.VectorR\x07version\x12'\n\rblock_indexes\x18\x04\x20\
    \x03(\x05R\x0cblockIndexesB\x02\x10\0\x12\x1d\n\nblock_size\x18\x05\x20\
    \x01(\x05R\tblockSize\"\x06\n\x04Ping\"\x1f\n\x05Close\x12\x16\n\x06reas\
    on\x18\x01\x20\x01(\tR\x06reason*\xed\x01\n\x0bMessageType\x12\x1f\n\x1b\
    MESSAGE_TYPE_CLUSTER_CONFIG\x10\0\x12\x16\n\x12MESSAGE_TYPE_INDEX\x10\
    \x01\x12\x1d\n\x19MESSAGE_TYPE_INDEX_UPDATE\x10\x02\x12\x18\n\x14MESSAGE\
    _TYPE_REQUEST\x10\x03\x12\x19\n\x15MESSAGE_TYPE_RESPONSE\x10\x04\x12\"\n\
    \x1eMESSAGE_TYPE_DOWNLOAD_PROGRESS\x10\x05\x12\x15\n\x11MESSAGE_TYPE_PIN\
    G\x10\x06\x12\x16\n\x12MESSAGE_TYPE_CLOSE\x10\x07*j\n\x12MessageCompress\
    ion\x12\x1c\n\x18MESSAGE_COMPRESSION_NONE\x10\0\x126\n\x17MESSAGE_COMPRE\
    SSION_LZ4\x10\x01\x1a\x19\xd2\x8e%\x15MessageCompressionLZ4*V\n\x0bCompr\
    ession\x12\x18\n\x14COMPRESSION_METADATA\x10\0\x12\x15\n\x11COMPRESSION_\
    NEVER\x10\x01\x12\x16\n\x12COMPRESSION_ALWAYS\x10\x02*\xb0\x01\n\x0cFile\
    InfoType\x12\x17\n\x13FILE_INFO_TYPE_FILE\x10\0\x12\x1c\n\x18FILE_INFO_T\
    YPE_DIRECTORY\x10\x01\x12#\n\x1bFILE_INFO_TYPE_SYMLINK_FILE\x10\x02\x1a\
    \x02\x08\x01\x12(\n\x20FILE_INFO_TYPE_SYMLINK_DIRECTORY\x10\x03\x1a\x02\
    \x08\x01\x12\x1a\n\x16FILE_INFO_TYPE_SYMLINK\x10\x04*v\n\tErrorCode\x12\
    \x17\n\x13ERROR_CODE_NO_ERROR\x10\0\x12\x16\n\x12ERROR_CODE_GENERIC\x10\
    \x01\x12\x1b\n\x17ERROR_CODE_NO_SUCH_FILE\x10\x02\x12\x1b\n\x17ERROR_COD\
    E_INVALID_FILE\x10\x03*~\n\x1eFileDownloadProgressUpdateType\x12-\n)FILE\
    _DOWNLOAD_PROGRESS_UPDATE_TYPE_APPEND\x10\0\x12-\n)FILE_DOWNLOAD_PROGRES\
    S_UPDATE_TYPE_FORGET\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
